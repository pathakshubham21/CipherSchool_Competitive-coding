 struct Node{
        Node* children[27];
        bool isEnd;
        Node(){
            for(int i = 0;i<27;i++){
                children[i] = NULL;
            }
            isEnd = false;
        }
        
    };
    void insert(string s, Node* root){
        Node* temp = root;
        
        for(int i = 0;i<s.length();i++){
            if (temp->children[s[i] - 'a'] == NULL){
                temp->children[s[i] - 'a'] = new Node();
            }
            temp = temp->children[s[i] - 'a'];
            
        }
        temp->isEnd = true;

    }
    bool check(int x, int y, int n, int m){
        return x >=0 && y >=0 && x <n&& y<m;
    }
    void find(int sx,int sy,vector<vector<char>>& board, 
	vector<string>& ans, Node* root, bool** visited, vector<pair<int,int>>& directions, 
	string st){
        if (root->isEnd){
            ans.push_back(st);
            root->isEnd = false;

        }
        visited[sx][sy] = true;
        for (auto p : directions){
            if (check(sx + p.first, sy + p.second,board.size(),board[0].size()) 
			&& !visited[sx + p.first][sy + p.second]){

                if (root->children[board[sx + p.first][sy + p.second] - 'a'] ==  NULL){
                    continue;
                } else {
                    find(sx+ p.first,sy + p.second, board,ans,
					root->children[board[sx + p.first][sy + p.second]- 'a'],
					visited,directions,st + board[sx + p.first][sy + p.second]);
                }
            }
        }  
        visited[sx][sy] = false;
        
    }
    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {
        Node* root = new Node();
        for(string s : words){
            insert(s,root);      
        }
        vector<string> ans;
        vector<pair<int,int>> directions{{1,0},{0,1},{-1,0},{0,-1}};

        bool** vis = new bool*[board.size()];
        for(int i = 0;i<board.size();i++){
            vis[i] = new bool[board[0].size()];
            for(int j = 0;j<board[0].size();j++){
                vis[i][j] = false;
            }
        }
        
        string st = "";
        for(int i = 0;i<board.size();i++){
            for(int j = 0;j<board[0].size();j++){
                if (root->children[board[i][j] - 'a'] != NULL){
                    find(i, j, board, ans, root->children[board[i][j] - 'a'],vis,directions,st + board[i][j]);
                }
            }
        }
        
        return ans;
        
        
    }
